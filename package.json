{
  "name": "generator-clam",
  "version": "0.1.25",
  "description": "A Clam generator for Yeoman",
  "keywords": [
    "yeoman-generator",
    "clam",
    "generator-clam"
  ],
  "homepage": "https://github.com/jayli/generator-clam",
  "bugs": {
    "url": "https://github.com/jayli/generator-clam/issues"
  },
  "author": {
    "name": "bachi",
    "email": "bachi@taobao.com",
    "url": "https://github.com/jayli"
  },
  "readmeFilename": "README.md",
  "_from": "generator-clam@",
  "main": "app/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/jayli/generator-clam.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "abc-generator": "~0.0.3",
    "yeoman-generator": "~0.13.3",
    "flex-combo": "~0.3.7",
    "jayli-server": "",
    "promise": ""
  },
  "devDependencies": {
    "mocha": "~1.10.0"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "# KISSY 项目构建工具，Generator-clam\n\n## What & Why\n\n淘北京前端Assest环境和构建工具\n\n工具介绍PPT：\n\n- [Generator-clam](https://speakerdeck.com/lijing00333/generator-clam2)\n- [FlexCombo Server](https://speakerdeck.com/lijing00333/grunt-flexcombo)\n\n说明：\n\n- 目标：是通过`yo clam`来将你引路到Grunt，帮助你更熟练的使用Grunt。\n- 面向人群：面向阿里系前端工程师，帮助你创建标准的KISSY项目结构代码和Widgets代码。\n- 愿景：打造一款无负担的前端开发脚手架工具，打破产品间的代码共享壁垒，让你的代码充满幸福。\n\n![](http://img04.taobaocdn.com/tps/i4/T1C5hpXwXeXXbkQf6j-210-45.jpg)\n\n环境依赖：Node、Npm，视频演示：[http://ascii.io/a/4384](http://ascii.io/a/4384)。\n\n![](./h/example.png)\n\n## 安装 & 基本命令\n\n首先安装[grunt](http://gruntjs.com) 和 [yeoman](http://yeoman.io/)：\n\n\tnpm install yo grunt-cli -g\n\n 安装Generator-Clam：\n\n\tnpm install -g generator-clam generator-kissy-gallery\n\n命令：\n\n- `yo clam:h`:打印帮助\n- `yo clam`:初始化一个标准的Project\n- `yo clam:mod`:初始化一个模块\n- `yo clam:page`:初始化一个Page\n- `yo clam:widget`:初始化一个标准kissy组件，首先创建组件空目录，进入空目录后执行此命令\n- `yo clam:widget x.y`:生成一个标准kissy组件的版本，进入到组件目录后执行。其中x.y是版本号\n- `yo clam:on`:启动web服务，服务支持SSI，推荐使用`grunt server`\n- `yo clam:install <git>`:(TODO)git可以是git地址，也可以是Gallery模块名称，都将对应的git项目源码下载到本地，类似`svn export`\n- `yo clam:search <name>`:(TODO)在Gallery中查找现有的匹配的模块名称\n\n## Bower 内嵌命令（非航旅前端团队，请掠过）\n\n依赖Bower\n\n\tsudo npm install -g bower\n\n安装最新包\n\n\tbower install tpi/button\n\n使用老的包\n\n\tbower install tpi/button#publish/0.1.0\n\n更新包\n\n\tbower update tpi/button\n\n### 创建PI格式的组件\n\nPI 格式的组件结构和[KISSY Gallery](http://gallery.kissyui.com/guide)完全一样，只是没了版本号\n\n创建PI格式的组件：先创建目录，并进入到这个目录，执行\n\t\n\tyo clam:pi\n\nPI 组件包含FlexCombo本地服务，需要手动`npm install`，之后启动服务\n\n\tsudo grunt server\n\n绑定host或者绑定代理（8080端口）访问：`http://a.tbcdn.cn/s/kissy/gallery/{module-name}`\n\n## Grunt 内嵌命令\n\n初始化完成的项目包含`Gruntfile.js`模板，可以辅助你完成：\n\n- `grunt`: 执行构建\n- `grunt prepub`:执行预发\n- `grunt publish`:执行发布\n- `grunt info`:查看当前库git地址\n- `grunt newbranch`:创建新daily分支，基于当前版本累加\n- `grunt watch`:监听文件修改，实时编译\n- `grunt server`:开启本地Demo调试模式\n- `grunt debug`:开启生产环境Debug模式\n- `grunt combohtml`:构建包含SSI的html，合并页面中的css和js\n- `grunt build`:默认构建流程\n\n### 本地调试\n\n本地调试调用了[flex-combo](https://npmjs.org/flex-combo)，访问绝对路径时和本地目录有一个映射关系，比如绝对地址映射到项目的`src`目录：\n\n\thttp://g.tbcdn.cn/group/project/ => ./src/\n\n启动本地服务：`grunt server`\n\n### grunt 构建配置项\n\n`Gruntfile.js`是Grunt脚本规则文件，此外项目基本参数存放在`abc.json`中，生成好的`abc.json`格式如下：\n\n\t{\n\t\t\"name\": \"h5-test\",\n\t\t\"desc\": \"description of your app\",\n\t\t\"type\": \"clam\",\n\t\t\"port\":\"80\",\n\t\t\"group\":\"trip\",\n\t\t\"src\":\"false\",\n\t\t\"version\":\"0.0.1\",\n\t\t\"author\": {\n\t\t\t\"name\": \"\",\n\t\t\t\"email\": \"\"\n\t\t},\n\t\t\"repository\": {\n\t\t\t\"type\": \"git\",\n\t\t\t\"url\": \"http://gitlab.alibaba-inc.com/trip/h5-test\"\n\t\t}\n\t}\n\n生成一个新的daily分支（`grunt newbranch`）时会自动更新`abc.json`的`version`字段。\n\n> ps:grunt构建任务依赖`grunt-mytps`子任务，该子任务（上传本地图片到CDN并替换地址）依赖python，并需要安装[tpsmate](https://github.com/sodabiscuit/tpsmate)。\n\n### Clam 生成的项目所依赖的重要npm模块\n\n- [flexcombo](https://npmjs.org/package/flex-combo) FlexCombo，本地服务器的核心\n- [Grunt-combohtml](https://npmjs.org/package/grunt-combohtml)，合并SSI的html，生成合并好的js和css\n- [Grunt-flexcombo](https://npmjs.org/package/grunt-flexcombo)，flexcombo的grunt版本\n- [Grunt-mytps](https://npmjs.org/package/grunt-mytps)，上传本地图片到tps服务器，依赖python\n- [Grunt-toascii](https://npmjs.org/package/grunt-toascii)，把文件中的非英文字符转码成对应的ascii码\n- [Grunt-cssimage](https://npmjs.org/package/grunt-cssimage)，对css文件中的图片进行压缩替换，支持远程图片抓取\n- [jayli-server](https://npmjs.org/package/jayli-server)，Simple-SSI Server，包含flexcombo模块\n- [kissy-gallery](https://npmjs.org/package/generator-kissy-gallery)，kissy gallery 组件构建工具\n- [Grunt-kmc](https://github.com/daxingplay/grunt-kmc)，KISSY 模块构建工具（Grunt版本）\n- [KMC](https://github.com/daxingplay/ModuleCompiler)，KISSY 模块构建工具\n\n\n### 使用 Generator-Clam 应对这三种基本场景\n\n1，创建新项目\n\n`yo clam`构建新项目时会生成Gruntfile.js。之后你只需特别关注Gruntfile.js即可。\n\n2，接手项目\n\n如果你要接手一个项目，代码检出后即可进行调试；在运行`grunt`命令之前需要运行`npm install`。 \n\n3，标准格式的KISSY组件\n\n[KISSY标准组件](http://gallery.kissyui.com)的构建使用`yo kissy-gallery x.y`，已经被映射为`yo clam:widget`，KISSY标准组件是可以直接构建为可发布到淘宝CDN的代码，并提交至`kissy gallery`中。因此，你的项目中所有widgets都应当和KISSY标准组件格式保持一致，方便被其他项目使用。\n\n### Demo的运行\n\n推荐使用方法2\n\n#### <del>方法1</del>\n\nGenerator-clam 提供一个轻服务（只提供静态文件服务器、[Flex-Combo](http://npmjs.org/flex-combo) 和SSI支持），启动服务后你可以这样访问Demo：\n\n\thttp://localhost:8888/src/pages/detail.html?ks-debug\n\n> 这里的SSI兼容apache，这个Server只提供Demo环境，且不支持脚本，如果需要，可以使用[apache+php来作为本地demo服务](http://wiki.ued.taobao.net/doku.php?id=ued.bj:f2e:tbcdn)，Clam只作为构建工具使用。\n\n#### 方法2：推荐\n\nGrunt中模板中提供`grunt server`方法，开启本地Demo服务，默认开启在80端口，在`abc.json`中修改端口配置。`grunt server`封装了`flexcombo`，提供一种最基本的服务：即线上CDN环境映射到本地目录，直接访问屏幕提示给出的URL即可（g.tbcdn.cn host指向本地）\n\n\t[bachi@yahoo ~/temp/h5-test]> sudo grunt server\n\tRunning \"server\" task\n\n\tRunning \"flexcombo:main\" (flexcombo) task\n\n\tPreview: http://g.tbcdn.cn/trip/h5-test/\n\n\tFlex Combo Server running at http://127.0.0.1:80\n\n访问demo时应当带上`?ks-debug`，上线后的项目引用`config.js`的绝对地址即可。\n\n如果想测试build完成后的代码，可以在本地创建软连接，映射线上版本号，通过`grunt server`启动服务来测试：\n\n\tln -s build src/0.1.8\n\n访问`http://g.tbcdn.cn/group/project/0.1.8/.../demo.html`\n\n> 本地环境依赖[flexcombo](https://npmjs.org/package/flex-combo)，更多用法参照官方帮助\n\n### 生产环境的 debug\n\n#### 生产环境 debug\n\n如果你的项目用clam生成，且已经上线了，如何debug其中一个源JS？\n\n1，将项目git源码checkout到本地（比如目录`path/to/local_pro/`）\n\n2，开启Debug模式\n\n\tsudo grunt debug \n\n这时开启了本地服务，并将目录映射到了`build/`下，同时开启了对`src/`中文件修改的监听\n\n3，在`'src'`目录中给你的js加断点即可\n\n#### 移动端的代码调试\n\n移动终端不能配host，但是可以配置代理的，我们使用 apache 做正向代理来访问源码，代理配置（例如开启apache的8080端口，Node服务采用80端口）：\n\n\tProxyRequests On\n\tProxyVia On\n\n\t<Proxy *>\n\t\tOrder deny,allow\n\t\tDeny from all\n\t\tAllow from all\n\t</Proxy>\n\n\t<VirtualHost *:8080>\n\t\tProxyPreserveHost On\n\t\tProxyRequests Off \n\t\tServerName g.tbcdn.cn\n\t\t# 如果代理服务器和源码在一台电脑上，指向localhost即可，否则填写源码所在的机器IP\n\t\tProxyPass / http://localhost/\n\t\tProxyPassReverse / http://localhost/\n\t</VirtualHost>\n\n同时源码直接开启 Debug 模式，调试构建好的代码。\n\nGrunt-flexcombo 带有本地反向代理，`grunt server`或者`grunt debug`可直接开启反向代理服务（8080）。[理用法参照这里](https://speakerdeck.com/lijing00333/grunt-flexcombo)\n\n### 预发和发布\n\n为了限制在daily分支上发布，我们将grunt构建也加了限制，非daily分支上禁止构建，不建议将此限制去掉，只有build目录中的文件会被发布，所发布的项目中build目录中的文件地址为如下两种，前缀自选\n\n\thttp://a.tbcdn.cn/g/group-name/project-name/x.y.z/mods.js\n\n对应到 g.tbcdn.cn 的地址：\n\n\thttp://g.tbcdn.cn/group-name/project-name/x.y.z/mods.js\n\n代码发布命令：\n\n- `grunt prepub` 预发\n- `grunt publish` 发布\n\n## 再多了解一点`Generator-Clam`\n\n[淘北京前端开发环境/工具建设里程碑](http://work.taobao.net/issues/3830)\n\n2013年淘系全面推广基于Gitlab的Assets发布，Generator-Clam 延续了Clam模块化的思想，结合Yeoman和Grunt提供了面向淘系前端环境构建脚手架工具，包含前端开发/构建/发布的全流程。Generator-Clam 对代码单元做更自由的定义，根据适用范围，任何代码单元从三个维度管理：\n\n- 项目（project）（代码集合最大单位）\n- 模块（module）（业务功能单元，部分业务之间可共用）\n- 组件（widget）（可全局共用）\n\n最初Clam独立出了Page，Page本身也是一个模块，这里统一用模块来管理。这里的`yo clam:page`只是生成一个引用了KISSY种子的空页面。\n\n代码单元有自身属性，自身属性只是为了区分其适用范围和生命周期，为了保持约定简单，代码单元在层级上不再做规定，所有模块单元都相互平行，代码之间的依赖和相互引用，取决于你对业务的拆解，不是脚手架的职责。\n\n最重要的，互联网项目的需求是涌现式的，项目的前端架构和设计是在开发中不断调整修改而来，而非开始就设计完成不再动了，这也是代码组织结构尽可能保持和业务弱相关的原因。\n\n最最重要的，组件级（widget）代码从开始就保持标准规范（Kissy Gallery），抽离出项目更方便，这在无常的Web项目中是唯一的促成积累、沉淀代码的方法。\n\n项目目录结构约定参照[PPT](https://speakerdeck.com/lijing00333/generator-clam2)。\n\n## Q & A\n\n1，'yo clam'安装node模块的时候报错？\n\n\tnpm ERR! Error: EACCES, mkdir '/usr/local/lib/node_modules/grunt-xx'\n\n- 原因：没有sudo\n- 解决办法：在当前目录执行`sudo npm install`\n\n2，tpsmate安装完了还是不能把图片自动上传CDN?\n\n- 原因：需要首先找到`node_modules`中手动执行一次\n- 解决办法：进入`node_modules/grunt-mytps/tasks/lib/tpsmate/src`，执行`python ./cli.py upload`，这时提示你输入TMS用户名和密码，完成即可\n\n详细文档参照：<https://github.com/sodabiscuit/tpsmate>\n\n3，tpsmate安装完成，但执行报错？\n\n- 原因：依赖包不完整\n- 解决办法：安装tpsmate的依赖\n\n\tpip install -r node_modules/grunt-mytps/tasks/lib/tpsmate/src/requirements.txt\n\n4，yo clam 构建好目录结构后安装npm包时间太长，怎么办？\n\n- 原因：构建项目最后使用`npm install`安装npm包\n- 解决办法：在首次构建项目的时候最后一步询问是否安装本地`node_modules`，输入`N`，在当前目录使用`npm install --link`，将包安装到全局。以后每次`yo clam`最后都不安装本地包，使用`npm install --link`来安装，速度会很快。\n\n5，yo clam:mod 构建好一个模块后，怎么运行它？\n\n直接访问生成好的html文件，`xx/index.html?ks-debug`，会有弹框\"ok\"。\n\n6，生成的默认Gruntfile.js只根据入口文件合并JS，我如何生成依赖关系表mods.js ？\n\n修改Gruntfile.js，参照注释修改kmc任务。有一点需要注意，如果要生成依赖关系表，你的JS源文件必须带有模块名定义，比如：\n\n\t// 模块名不能省略\n\tKISSY.add('grp/header/index',function(S){\n\t\t// your code\n\t});\n\n7，`grunt server`启动报错`Error: listen EACCES。`\n\n在Mac/Linux下需要root权限才能启用80端口，加上sudo\n\t\n\tsudo grunt server\n\n8，`grunt server`提示Error: listen EADDRINUSE。\n\nFlex Combo所需要使用的端口正在被使用中，如果这个端口是80端口，你需要检查系统中是否有其他web容器，比如Apache、Nginx等是否使用了80端口。如果不是，你需要检查是否系统中有其他Flex Combo正在运行。\n\n9，运行`grunt server`时报错：“Error: EMFILE, too many open files”\n\n运行：\n\n\tulimit -n 10000\n\n10，依赖的yeoman工具版本\n\n该程序在yeoman 1.0.0-rc.1.1 版本下测试通过\n\n11，grunt server后，访问我的文件报错：`Fatal error: Cannot read property 'host' of undefined`\n\n是因为你访问的JS或CSS文件在本地不存在，且在线上也不存在，保证本地文件存在即可\n\n默认情况下，你需要保证访问地址的host是g.tbcdn.cn或a.tbcdn.cn，如果使用别的域名，需要在`~/.flex-combo/config.json`中修改配置项：\n\n\thosts:{\n\t\t'a.tbcdn.cn':'122.255.67.241',\n\t\t'g.tbcdn.cn':'155.238.23.250',\n\t\t'your.host.name':'155.238.23.250'//ip地址配置到对应的cdn地址\n\t}\n\n12，SSI 不起作用？\n\n看你是不是格式写的不对？`<!--#include virtual=\"path.html\" -->`，`#`之前不要有空格\n\n13，在windows下开启服务后，访问`http://localhost`或者`http://127.0.0.1`报错？\n\n需要直接访问你的项目所在的目录`http://localhost/group/pro/`\n\n## RoadMap\n\n- JSON接口模拟和映射\n- juicer 模板的各种平台的转换\n- `yo clam:install`/`yo clam:search`，安装和查找Gallery模块\n\n",
  "_id": "generator-clam@0.1.24",
  "dist": {
    "shasum": "2d88446936a75f67773a18c5e4c7c11391d36d29"
  },
  "_resolved": "https://registry.npmjs.org/generator-clam/-/generator-clam-0.1.24.tgz"
}
